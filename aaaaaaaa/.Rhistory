Ya$Division <- factor(Ya$Anillos,
levels = c(1:3, 4:8, 9:13, 14:28, 29),
labels = c(rep('cria', 3), rep('joven', 5),
rep('adulto', 5), rep('longevo', 15), 'longevo'))
library(dplyr)
Ya <- Ya %>%
filter(Sexo != "I")
Ya <- Ya %>%
filter(Division != "cria")
# Ver los resultados de 'Division'
Ya<-Ya[,-9]
Ya$Sexo<-as.factor(Ya$Sexo)
Ya$Division<-as.factor(Ya$Division)
knitr::kable(Ya)
table(Ya$Division)
library(ggplot2)
ggplot(Ya, aes(x = Division, fill = Sexo)) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(
title = "Distribución conjunta de Sexo y División",
x = "División",
y = "Frecuencia"
)
#View(Ya,show.frq=T,show.prc=T,show.na=T)
library(ggplot2)
library(ggplot2)
ggplot(Ya, aes(x = Sexo, y = Longitud, fill = Sexo)) +
geom_boxplot() +
labs(title = "Distribución de Longitud por Sexo", x = "Sexo", y = "Longitud (mm)") +
theme_minimal()
ggplot(Ya, aes(x = as.factor(Division), y = PesoE, fill = as.factor(Division))) +
geom_boxplot() +
labs(title = "Peso Total por Edad (Division)", x = "Edad (Division)", y = "Peso Total (gramos)") +
theme_minimal()
#View(Ya,show.frq=T,show.prc=T,show.na=T)
library(ggplot2)
library(ggplot2)
ggplot(Ya, aes(x = Division, y = Longitud, fill = Division)) +
geom_boxplot() +
labs(title = "Distribución de Longitud por Division", x = "Division", y = "Longitud (mm)") +
theme_minimal()
ggplot(Ya, aes(x = as.factor(Division), y = PesoE, fill = as.factor(Division))) +
geom_boxplot() +
labs(title = "Peso Total por Edad (Division)", x = "Edad (Division)", y = "Peso Total (gramos)") +
theme_minimal()
#View(Ya,show.frq=T,show.prc=T,show.na=T)
library(ggplot2)
library(ggplot2)
ggplot(Ya, aes(x = Division, y = Longitud, fill = Division)) +
geom_boxplot() +
labs(title = "Distribución de Longitud del caparazon por Division", x = "Division", y = "Longitud (mm)") +
theme_minimal()
#View(Ya,show.frq=T,show.prc=T,show.na=T)
library(ggplot2)
library(ggplot2)
ggplot(Ya, aes(x = Division, y = Longitud, fill = Division)) +
geom_boxplot() +
labs(title = "Distribución de Longitud del caparazon por Division", x = "Division", y = "Longitud (mm)") +
theme_minimal()
library(summarytools)
stby(data = Ya$Longitud, INDICES = Ya$Division, FUN = descr)
#View(Ya,show.frq=T,show.prc=T,show.na=T)
library(ggplot2)
library(ggplot2)
ggplot(Ya, aes(x = Division, y = Longitud, fill = Division)) +
geom_boxplot() +
labs(title = "Distribución de Longitud del caparazon por Division", x = "Division", y = "Longitud (mm)") +
theme_minimal()
library(summarytools)
stby(data = Ya$Longitud, INDICES = Ya$Division, FUN = descr)
library(FactoMineR)
library(factoextra)
library(missMDA)
library(dplyr)
Ya_numeric <- Ya %>% select_if(is.numeric)
# Ahora, calcula la correlación
correlation_matrix <- cor(Ya_numeric)
cor.plot(correlation_matrix,
main="Mapa de Calor",
diag=T,
show.legend = T,
numbers=F,
upper=F)
View(Y)
dim(Y)
summary(Y)
famd_pre_result <- Y %>%
FAMD(ncp = 6, graph = T)
famd_pre_result
View(Y)
Y=Y[,-1]
famd_pre_result <- Y %>%
FAMD(ncp = 6, graph = T)
famd_pre_result
famd_pre_result %>% fviz_famd_var()
eigenvalues <- famd_pre_result %>% get_eigenvalue()
famd_pre_result %>% fviz_screeplot()
famd_pre_result %>% fviz_screeplot(addlabels = TRUE, ylim = c(0, 30),
barfill="white", barcolor ="darkblue",
linecolor ="red")
var_analysis <- famd_pre_result %>% get_famd_var()
var_analysis$coord
var_analysis$cos2
var_analysis$contrib
famd_pre_result %>% fviz_contrib(choice = "var", axes=1:2)
famd_pre_result %>% fviz_contrib(choice = "var", axes=1:5)
View(Y)
# Lista de variables cuantitativas relacionadas con los moluscos
quantitative_vars_moluscos <- c("Longitud", "Diametro", "Altura", "PesoE", "PesoD", "PesoV", "PesoC")
# Estandarizar solo las variables cuantitativas de los moluscos
Ya[quantitative_vars_moluscos] <- scale(Ya[quantitative_vars_moluscos])
# Verifica las primeras filas del dataframe estandarizado
head(Ya)
famd_result_ya <- FAMD(Ya,ncp=5 , graph =F)
# Visualizar los resultados
famd_result_ya <- FAMD(Ya,ncp=5 , graph =F)
# Visualizar los resultados
famd_result_ya
famd_pre_result_ya <- Ya %>%
FAMD( ncp=5 ,graph =F)
eigenvalues <- famd_pre_result_ya %>% get_eigenvalue()
eigenvalues
famd_pre_result_ya %>% fviz_screeplot(addlabels = TRUE, ylim = c(0, 80),
barfill="white", barcolor ="darkblue",
linecolor ="red")
var_analysis <- famd_pre_result_ya %>% get_famd_var()
var_analysis$coord
var_analysis$cos2
var_analysis$contrib
library(FactoMineR)
library(factoextra)
library(missMDA)
setwd("C:/Users/usuario5810/Downloads")
# Pregunta 1
datos <- read.csv("MLII_2025_01_PC2_Datos01.csv", header = T)
# Pregunta 1
datos <- read.csv("MLII_2025_01_PC2_Datos01.csv", header = T); datos
# Pregunta 1
datos <- read.csv("MLII_2025_01_PC2_Datos01.csv", header = T, sep = ";"); datos
X <- datos[,1:8]
Y <- datos[,9]
Y
head(datos)
# Entrada de datos
datos <- read.csv("MLII_2025_01_PC2_Datos01.csv", header = T, sep = ";"); datos
attach(datos)
# Estimación del modelo
Modelo1 <- glm(Y1_Produccion ~ X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X7_Cacao+X8_Mango,
family = gaussian(identity))
summary(Modelo1)
# Estimando los coeficientes de regresion
coef(Modelo1)
# Estimación del modelo
Modelo1 <- glm(Y1_Produccion ~ .,family = gaussian(identity))
summary(Modelo1)
summary(Modelo1)
R2=summary(Modelo)$r.squared; R2
R2=summary(Modelo1)$r.squared; R2
summary(Modelo1)
R2=summary(Modelo1)$r.squared; R2
# Examinar los factores de inflación de variancia (VIF)
library(faraway)
vif(Modelo)
vif(Modelo1)
head(datos)
X = model.matrix (Y1_Produccion~ . , Datos) [, -9]
X = model.matrix (Y1_Produccion~ . , datos) [, -9]
y = datos$Y1_Produccion
# Análisis de la multicolinealidad
n=dim(X)[1]; p=dim(X)[2]
# Examinar matriz de correlaciones
round(cor(X), 3)
X = model.matrix (Y1_Produccion~ . , datos)
y = datos$Y1_Produccion
#  Ajuste a la regresión lineal múltiple (mínimos cuadrados)
Modelo1 <- glm(Y1_Produccion ~ .,family = gaussian(identity))
summary(Modelo1)
R2=summary(Modelo1)$r.sq ; R2
# Análisis de la multicolinealidad
n=dim(X)[1]; p=dim(X)[2]
# Examinar matriz de correlaciones
round(cor(X), 3)
X = model.matrix (Y1_Produccion~ . , datos) [, -1]
y = datos$Y1_Produccion
#  Ajuste a la regresión lineal múltiple (mínimos cuadrados)
Modelo1 <- glm(Y1_Produccion ~ .,family = gaussian(identity))
summary(Modelo1)
R2=summary(Modelo1)$r.sq ; R2
# Análisis de la multicolinealidad
n=dim(X)[1]; p=dim(X)[2]
# Examinar matriz de correlaciones
round(cor(X), 3)
#  Ajuste a la regresión lineal múltiple (mínimos cuadrados)
Modelo1 <- glm(Y1_Produccion ~ .,data = datos,family = gaussian(identity))
summary(Modelo1)
R2=summary(Modelo1)$r.sq ; R2
R2=summary(Modelo1)$r.squared ; R2
detach(datos)
datos <- read.csv("MLII_2025_01_PC2_Datos01.csv", header = T, sep = ";"); datos
attach(datos)
X = model.matrix (Y1_Produccion~ . , datos) [, -1]
y = datos$Y1_Produccion
#  Ajuste a la regresión lineal múltiple (mínimos cuadrados)
Modelo1 <- glm(Y1_Produccion ~ .,data = datos,family = gaussian(identity))
summary(Modelo1)
R2=summary(Modelo1)$r.squared ; R2
# Análisis de la multicolinealidad
n=dim(X)[1]; p=dim(X)[2]
# Examinar matriz de correlaciones
round(cor(X), 3)
# Examinar los factores de inflación de variancia (VIF)
library(faraway)
vif(Modelo1)
#  Examinar valores propios
XX=t(X)%*%X
Lambda=eigen(XX)$values; Lambda
#  Calcular el índice k
k=max(Lambda)/min(Lambda); k [1]
#  Calcular el índice k por predictor
for (i in 1:p) {
cat("kj: ",i, " = ", max(Lambda)/Lambda[i],"\n")
}
Modelo1 <- glm(Y1_Produccion ~ .,data = datos)
summary(Modelo1)
# Análisis de la multicolinealidad
n=dim(X)[1]; p=dim(X)[2]
# Examinar matriz de correlaciones
round(cor(X), 3)
Modelo1 <- glm(Y1_Produccion ~ .,data = datos,family = gaussian(identity))
summary(Modelo1)
# Análisis de la multicolinealidad
n=dim(X)[1]; p=dim(X)[2]
# Examinar matriz de correlaciones
round(cor(X), 3)
Modelo1 <- glm(Y1_Produccion ~ .,data = datos)
summary(Modelo1)
# Análisis de la multicolinealidad
n=dim(X)[1]; p=dim(X)[2]
# Examinar matriz de correlaciones
round(cor(X), 3)
# Examinar los factores de inflación de variancia (VIF)
library(faraway)
vif(Modelo1)
#  Examinar valores propios
XX=t(X)%*%X
Lambda=eigen(XX)$values; Lambda
#  Calcular el índice k por predictor
for (i in 1:p) {
cat("kj: ",i, " = ", max(Lambda)/Lambda[i],"\n")
}
summary(Modelo1)
vif(Modelo1)
#  Calcular el índice k por predictor
for (i in 1:p) {
cat("kj: ",i, " = ", max(Lambda)/Lambda[i],"\n")
}
R2=summary(Modelo1)$r.squared; R2
Modelo1 <- glm(Y1_Produccion ~ .,data = datos)
summary(Modelo1)
R2=summary(Modelo1)$r.squared; R2
Modelo1 <- lm(Y1_Produccion ~ .,data = datos)
summary(Modelo1)
R2=summary(Modelo1)$r.squared; R2
# Examinar los factores de inflación de variancia (VIF)
library(faraway)
vif(Modelo1)
Modelo1 <- glm(Y1_Produccion ~ .,data = datos)
summary(Modelo1)
R2=summary(Modelo1)$r.squared; R2
# Examinar los factores de inflación de variancia (VIF)
library(faraway)
vif(Modelo1)
Modelo1 <- lm(Y1_Produccion ~ .,data = datos)
summary(Modelo1)
# Examinar los factores de inflación de variancia (VIF)
library(faraway)
vif(Modelo1)
XX=t(X)%*%X
Lambda=eigen(XX)$values; Lambda
for (i in 1:p) {
cat("kj: ",i, " = ", max(Lambda)/Lambda[i],"\n")
}
p
max(Lambda)
vif(Modelo1)
#  Calcular el índice k por predictor
XX=t(X)%*%X
Lambda=eigen(XX)$values; Lambda
for (i in 1:p) {
cat("kj: ",i, " = ", max(Lambda)/Lambda[i],"\n")
}
dim(X)
n=dim(X)[1];p=dim(X[2])
n=dim(X)[1];p=dim(X)[2]
B <- read.delim("B.txt")
B
head(datos)
head(datos)
head(datos)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango, family = gaussian((identify())))
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos ,family = gaussian((identify())))
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos ,family = gaussian((identify))
summary(Modelo2)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos ,family = gaussian((identify)))
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos ,family = gaussian((identity))
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos ,family = gaussian((identity)))
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos, family = gaussian(identical()))
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos, family = gaussian(identical))
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos, family = gaussian(identity))
summary(Modelo2)
summary(Modelo1)
dim(B)
B[256]
B[256,]
B[256_260,]
B[256:260,]
library(glmnet)
Modelo_R = glmnet(X,y,alpha = 0)
B[259:270,]
B[255:270,]
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = mse)
cv.ridge$lambda.1se
B[245:250,]
B[245:260,]
B[235:260,]
B[235:270,]
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = mse)
?cv.glmnet
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = "mse")
cv.ridge$lambda.1se
Modelo_R_Final = glmnet(X,y,alpha = 0, lambda = cv.ridge$lambda.1se)
summary(Modelo_R_Final)
Modelo_R_Final = glmnet(X,y,alpha = 1, lambda = cv.ridge$lambda.1se)
summary(Modelo_R_Final)
set.seed(1000)
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = "mse")
cv.ridge$lambda.1se
Modelo_R_Final = glmnet(X,y,alpha = 1, lambda = cv.ridge$lambda.1se)
summary(Modelo_R_Final)
B[260:300,]
coef(Modelo_R_Final)
set.seed(2025)
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = "mse")
cv.ridge$lambda.1se
Modelo_R_Final = glmnet(X,y,alpha = 1, lambda = cv.ridge$lambda.1se)
coef(Modelo_R_Final)
set.seed(2025)
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = "mse")
cv.ridge$lambda.1se
Modelo_R_Final = glmnet(X,y,alpha = 0, lambda = cv.ridge$lambda.1se)
coef(Modelo_R_Final)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos,
family = gaussian(identity))
summary(Modelo2)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos,
family = gaussian(identity))
summary(Modelo2)
vif(Modelo1)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos,
family = gaussian(identity))
summary(Modelo2)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos,
family = gaussian(identity))
summary(Modelo2)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
Modelo2 <- glm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
B[240:300,]
B[200:300,]
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
summary(Modelo1)
X = model.matrix (Y1_Produccion~ . , datos) [, -1]
y = datos$Y1_Produccion
n=dim(X)[1];p=dim(X)[2]
Modelo1 <- lm(Y1_Produccion ~ .,data = datos)
summary(Modelo1)
# Examinar los factores de inflación de variancia (VIF)
library(faraway)
vif(Modelo1)
#  Calcular el índice k por predictor
XX=t(X)%*%X
Lambda=eigen(XX)$values; Lambda
for (i in 1:p) {
cat("kj: ",i, " = ", max(Lambda)/Lambda[i],"\n")
}
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
vif(Modelo2)
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X2_Mandarina+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
vif(Modelo2)
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
vif(Modelo2)
R2=summary(Modelo2)$r.squared; R2
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
vif(Modelo2)
R2=summary(Modelo2)$r.squared; R2
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
vif(Modelo2)
R2=summary(Modelo2)$r.squared; R2
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
vif(Modelo2)
R2=summary(Modelo2)$r.squared; R2
summary(Modelo2)
R2=summary(Modelo2)$r.squared; R2
R2=summary(Modelo1)$r.squared; R2
R2=summary(Modelo2)$r.squared; R2
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X7_Cacao+X8_Mango,datos)
summary(Modelo2)
R2=summary(Modelo2)$r.squared; R2
summary(Modelo1)
R2=summary(Modelo1)$r.squared; R2
vif(Modelo1)
vif(Modelo2)
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
R2=summary(Modelo1)$r.squared; R2
Modelo2 <- lm(Y1_Produccion~X1_Cebolla+X3_Platano+X4_Ajo+X5_Cafe+X6_Esparrago+X8_Mango,datos)
summary(Modelo2)
R2=summary(Modelo1)$r.squared; R2
vif(Modelo2)
R2=summary(Modelo1)$r.squared; R2
B[2300:350,]
B[230:350,]
library(leaps)
Modelo_B <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = backward)
Modelo_B <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = "backward")
ID = which.max(summary(Modelo_B)$adjr2);ID
round(coef(object = Modelo_B, id = ID),3)
summary(Modelo_B)
Modelo_B <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = "backward")
ID_B = which.max(summary(Modelo_B)$adjr2);ID_B
round(coef(object = Modelo_B, id = ID_B),3)
Modelo_F <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = "forward")
ID_F = which.max(summary(Modelo_F)$adjr2);ID_F
round(coef(object = Modelo_F, id = ID_F),3)
Modelo_B
vif(summary(Modelo_B))
names(summary(Modelo_B))
?summary
summary(Modelo_B)$r.squared
ID_B = which.max(summary(Modelo_B)$adjr2);ID_B
summary(Modelo_F)$adjr2
summary(Modelo_B)$adjr2
library(leaps)
Modelo_B <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = "backward")
ID_B = which.max(summary(Modelo_B)$adjr2);ID_B
round(coef(object = Modelo_B, id = ID_B),3)
Modelo_F <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = "forward")
ID_F = which.max(summary(Modelo_F)$adjr2);ID_F
round(coef(object = Modelo_F, id = ID_F),3)
summary(Modelo2)
coef(Modelo2)
library(leaps)
Modelo_B <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = "backward")
ID_B = which.max(summary(Modelo_B)$adjr2);ID_B
round(coef(object = Modelo_B, id = ID_B),3)
Modelo_F <- regsubsets(Y1_Produccion~., datos, nvmax = 15, method = "forward")
ID_F = which.max(summary(Modelo_F)$adjr2);ID_F
round(coef(object = Modelo_F, id = ID_F),3)
max(summary(Modelo_B)$adjr2)
max(summary(Modelo_F)$adjr2)
##################
### Pregunta 4 ###
##################
?cv.glmnet
library(glmnet)
set.seed(1000)
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = "mse")
cv.ridge$lambda.1se
Modelo_R_Final = glmnet(X,y,alpha = 0, lambda = cv.ridge$lambda.1se)
round(coef(Modelo_R_Final),3)
deviance(Modelo_L_Final)
deviance(Modelo_R_Final)
cv.lasso = cv.glmnet(X,y,alpha = 1, nfolds = 10, type.measure = "mse")
cv.lasso$lambda.1se
Modelo_L_Final = glmnet(X,y,alpha = 1, lambda = cv.lasso$lambda.1se)
round(coef(Modelo_L_Final),3)
X = model.matrix (Y1_Produccion~ . , datos) [, -1]
y = datos$Y1_Produccion
library(glmnet)
set.seed(1000)
cv.ridge = cv.glmnet(X,y,alpha = 0, nfolds = 10, type.measure = "mse")
cv.ridge$lambda.1se
Modelo_R_Final = glmnet(X,y,alpha = 0, lambda = cv.ridge$lambda.1se)
round(coef(Modelo_R_Final),3)
set.seed(1000)
cv.lasso = cv.glmnet(X,y,alpha = 1, nfolds = 10, type.measure = "mse")
cv.lasso$lambda.1se
Modelo_L_Final = glmnet(X,y,alpha = 1, lambda = cv.lasso$lambda.1se)
round(coef(Modelo_L_Final),3)
summary(Modelo_R_Final)
Modelo_R_Final
?glmnet
round(coef(Modelo_R_Final),3)
round(coef(Modelo_L_Final),3)
